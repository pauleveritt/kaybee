{"version":3,"sources":["../node_modules/hyperapp/src/index.js","filteredlisting/dbjson.ts","filteredlisting/Actions.ts","filteredlisting/Dumpstate.tsx","filteredlisting/Notification.tsx","filteredlisting/Pagination.tsx","filteredlisting/Author.tsx","filteredlisting/Duration.tsx","filteredlisting/Reference.tsx","filteredlisting/References.tsx","filteredlisting/TechLogo.tsx","filteredlisting/Result.tsx","filteredlisting/Results.tsx","filteredlisting/Searchbox.tsx","filteredlisting/SidebarCheckbox.tsx","filteredlisting/SidebarRadio.tsx","filteredlisting/SidebarSelect.tsx","filteredlisting/Sidebar.tsx","filteredlisting/utils.ts","filteredlisting/Container.tsx","filteredlisting/State.ts","index.tsx"],"names":["h","name","attributes","length","rest","children","arguments","push","node","pop","key","app","state","actions","view","container","map","skipRender","rootElement","oldNode","recycleElement","element","nodeName","toLowerCase","call","childNodes","nodeType","nodeValue","lifecycle","isRecycling","globalState","clone","wiredActions","wireStateToActions","path","action","data","result","getPartialState","then","setPartialState","concat","scheduleRender","resolveNode","render","patch","parent","isSvg","newElement","createElement","document","createTextNode","createElementNS","oncreate","i","appendChild","insertBefore","updateElement","oldAttributes","cb","onupdate","oldKeyed","newKeyed","oldElements","oldChildren","oldKey","getKey","k","newKey","keyedNode","target","source","out","value","slice","eventListener","event","currentTarget","events","type","updateAttribute","oldValue","style","setProperty","addEventListener","removeEventListener","setAttribute","removeAttribute","removeElement","done","removeChild","removeChildren","ondestroy","onremove"],"mappings":";AAqYC,aArYM,SAASA,EAAEC,EAAMC,GAKfC,IAJHC,IAAAA,KACAC,KACAF,EAASG,UAAUH,OAEhBA,KAAW,GAAGC,EAAKG,KAAKD,UAAUH,IAElCC,KAAAA,EAAKD,QAAQ,CACdK,IAAAA,EAAOJ,EAAKK,MACZD,GAAAA,GAAQA,EAAKC,IACVN,IAAAA,EAASK,EAAKL,OAAQA,KACpBI,EAAAA,KAAKC,EAAKL,SAEA,MAARK,IAAyB,IAATA,IAA0B,IAATA,GACjCD,EAAAA,KAAKC,GAIX,MAAgB,mBAATP,EACVA,EAAKC,MAAkBG,IAEXJ,SAAAA,EACEC,WAAAA,MACFG,SAAAA,EACLH,IAAAA,GAAcA,EAAWQ,KAI/B,SAASC,EAAIC,EAAOC,EAASC,EAAMC,GACpCC,IAIAC,EAJAD,KAASA,IACTE,EAAeH,GAAaA,EAAUV,SAAS,IAAO,KACtDc,EAAUD,GAWLE,SAAAA,EAAeC,GACf,OACKA,SAAAA,EAAQC,SAASC,cACf,cACFP,SAAAA,EAAIQ,KAAKH,EAAQI,WAAY,SAASJ,GACvCA,OAAqB,IAArBA,EAAQK,SACXL,EAAQM,UACRP,EAAeC,MAlBID,CAAeF,GACxCU,KAEAC,GAAc,EACdC,EAAcC,EAAMnB,GACpBoB,EA4EKC,SAAAA,EAAmBC,EAAMtB,EAAOC,GAClC,IAAA,IAAIH,KAAOG,EACU,mBAAjBA,EAAQH,GACV,SAASA,EAAKyB,GACLzB,EAAAA,GAAO,SAAS0B,GAClBC,IAAAA,EAASF,EAAOC,GAoBbC,MAlBe,mBAAXA,IACAA,EAAAA,EAAOC,EAAgBJ,EAAMJ,GAAcjB,IAIpDwB,GACAA,KAAYzB,EAAQ0B,EAAgBJ,EAAMJ,MACzCO,EAAOE,MAGLT,EAAAA,EAAcU,EACbN,EACAH,EAAMnB,EAAOyB,GACbP,IAKCO,GAtBV,CAwBE3B,EAAKG,EAAQH,IAChBuB,EACEC,EAAKO,OAAO/B,GACXE,EAAMF,GAAOqB,EAAMnB,EAAMF,IACzBG,EAAQH,GAAOqB,EAAMlB,EAAQH,KAI/BG,OAAAA,EA/GUoB,IAAuBH,EAAaC,EAAMlB,IAItDmB,OAFPU,IAEOV,EAcEW,SAAAA,EAAYnC,GACZ,MAAgB,mBAATA,EACVmC,EAAYnC,EAAKsB,EAAaE,IACtB,MAARxB,EACEA,EACA,GAGCoC,SAAAA,IACM,GAAC3B,EAEVT,IAAAA,EAAOmC,EAAY7B,GAQhBc,IANHb,IAAcE,IACF4B,EA6NTA,SAAAA,EAAMC,EAAQzB,EAASF,EAASX,EAAMuC,GACzCvC,GAAAA,IAASW,QACN,GAAe,MAAXA,GAAmBA,EAAQG,WAAad,EAAKc,SAAU,CAC5D0B,IAAAA,EA5FCC,SAAAA,EAAczC,EAAMuC,GACvB1B,IAAAA,EACc,iBAATb,GAAqC,iBAATA,EAC/B0C,SAASC,eAAe3C,IACvBuC,EAAQA,GAA2B,QAAlBvC,EAAKc,UACrB4B,SAASE,gBACP,6BACA5C,EAAKc,UAEP4B,SAASD,cAAczC,EAAKc,UAEhCpB,IAAAA,EAAaM,EAAKN,WAClBA,GAAAA,EAAY,CACVA,EAAWmD,UACH9C,EAAAA,KAAK,WACF8C,EAAAA,SAAShC,KAInB,IAAA,IAAIiC,EAAI,EAAGA,EAAI9C,EAAKH,SAASF,OAAQmD,IAChCC,EAAAA,YACNN,EACGzC,EAAKH,SAASiD,GAAKX,EAAYnC,EAAKH,SAASiD,IAC9CP,IAKD,IAAA,IAAI9C,KAAQC,EACCmB,EAAAA,EAASpB,EAAMC,EAAWD,GAAO,KAAM8C,GAIpD1B,OAAAA,EA2DY4B,CAAczC,EAAMuC,GAC9BS,EAAAA,aAAaR,EAAY3B,GAEjB,MAAXF,GACY2B,EAAAA,EAAQzB,EAASF,GAGvB6B,EAAAA,OACL,GAAwB,MAApB7B,EAAQG,SACTK,EAAAA,UAAYnB,MACf,EAlEAiD,SAAcpC,EAASqC,EAAexD,EAAY6C,GACpD,IAAA,IAAI9C,KAAQ8B,EAAM2B,EAAexD,GAElCA,EAAWD,MACD,UAATA,GAA6B,YAATA,EACjBoB,EAAQpB,GACRyD,EAAczD,KAGhBoB,EAAAA,EACApB,EACAC,EAAWD,GACXyD,EAAczD,GACd8C,GAKFY,IAAAA,EAAK9B,EAAc3B,EAAWmD,SAAWnD,EAAW0D,SACpDD,GACQpD,EAAAA,KAAK,WACVc,EAAAA,EAASqC,KA+CZrC,CAAAA,EACAF,EAAQjB,WACRM,EAAKN,WACJ6C,EAAQA,GAA2B,QAAlBvC,EAAKc,UASpB,IANDuC,IAAAA,KACAC,KACAC,KACAC,EAAc7C,EAAQd,SACtBA,EAAWG,EAAKH,SAEXiD,EAAI,EAAGA,EAAIU,EAAY7D,OAAQmD,IAAK,CAC/BA,EAAAA,GAAKjC,EAAQI,WAAW6B,GAEhCW,IAAAA,EAASC,EAAOF,EAAYV,IAClB,MAAVW,IACOA,EAAAA,IAAWF,EAAYT,GAAIU,EAAYV,KAO7Ca,IAHHb,IAAAA,EAAI,EACJa,EAAI,EAEDA,EAAI9D,EAASF,QAAQ,CACtB8D,IAAAA,EAASC,EAAOF,EAAYV,IAC5Bc,EAASF,EAAQ7D,EAAS8D,GAAKxB,EAAYtC,EAAS8D,KAEpDL,GAAAA,EAASG,GACXX,SAIEc,GAAU,MAAVA,GAAkBA,IAAWF,EAAOF,EAAYV,EAAI,IAQpDc,GAAU,MAAVA,GAAkBvC,EACN,MAAVoC,IACI5C,EAAAA,EAAS0C,EAAYT,GAAIU,EAAYV,GAAIjD,EAAS8D,GAAIpB,GAC5DoB,KAEFb,QACK,CACDe,IAAAA,EAAYR,EAASO,OAErBH,IAAWG,GACP/C,EAAAA,EAASgD,EAAU,GAAIA,EAAU,GAAIhE,EAAS8D,GAAIpB,GACxDO,KACSe,EAAU,GAEjBhD,EAAAA,EACAA,EAAQmC,aAAaa,EAAU,GAAIN,EAAYT,IAC/Ce,EAAU,GACVhE,EAAS8D,GACTpB,GAGI1B,EAAAA,EAAS0C,EAAYT,GAAI,KAAMjD,EAAS8D,GAAIpB,GAG3CqB,EAAAA,GAAU/D,EAAS8D,GAC5BA,SAhCc,MAAVF,GACY5C,EAAAA,EAAS0C,EAAYT,GAAIU,EAAYV,IAErDA,IAiCGA,KAAAA,EAAIU,EAAY7D,QACS,MAA1B+D,EAAOF,EAAYV,KACPjC,EAAAA,EAAS0C,EAAYT,GAAIU,EAAYV,IAErDA,IAGG,IAAA,IAAIA,KAAKO,EACPC,EAASR,IACEjC,EAAAA,EAASwC,EAASP,GAAG,GAAIO,EAASP,GAAG,IAIlDjC,OAAAA,EA/TSwB,CAAM9B,EAAWG,EAAaC,EAAUA,EAAUX,IAGpD,GAAA,EAEPoB,EAAUzB,QAAQyB,EAAUnB,KAAVmB,GAGlBc,SAAAA,IACFzB,IACU,GAAA,EACF2B,WAAAA,IAINb,SAAAA,EAAMuC,EAAQC,GACjBC,IAAAA,KAEC,IAAA,IAAIlB,KAAKgB,EAAQE,EAAIlB,GAAKgB,EAAOhB,GACjC,IAAA,IAAIA,KAAKiB,EAAQC,EAAIlB,GAAKiB,EAAOjB,GAE/BkB,OAAAA,EAGAhC,SAAAA,EAAgBN,EAAMuC,EAAOF,GAChCD,IAAAA,KACApC,OAAAA,EAAK/B,QACA+B,EAAAA,EAAK,IACVA,EAAK/B,OAAS,EACVqC,EAAgBN,EAAKwC,MAAM,GAAID,EAAOF,EAAOrC,EAAK,KAClDuC,EACC1C,EAAMwC,EAAQD,IAEhBG,EAGAnC,SAAAA,EAAgBJ,EAAMqC,GAEtBjB,IADHA,IAAAA,EAAI,EACDA,EAAIpB,EAAK/B,QACLoE,EAAAA,EAAOrC,EAAKoB,MAEhBiB,OAAAA,EAyCAL,SAAAA,EAAO1D,GACPA,OAAAA,EAAOA,EAAKE,IAAM,KAGlBiE,SAAAA,EAAcC,GACdA,OAAAA,EAAMC,cAAcC,OAAOF,EAAMG,MAAMH,GAGvCI,SAAAA,EAAgB3D,EAASpB,EAAMwE,EAAOQ,EAAUlC,GACnD9C,GAAS,QAATA,QACG,GAAa,UAATA,EACJ,IAAA,IAAIqD,KAAKvB,EAAMkD,EAAUR,GAAQ,CAChCS,IAAAA,EAAiB,MAATT,GAA6B,MAAZA,EAAMnB,GAAa,GAAKmB,EAAMnB,GAC9C,MAATA,EAAE,GACIrD,EAAAA,GAAMkF,YAAY7B,EAAG4B,GAErBjF,EAAAA,GAAMqD,GAAK4B,MAIP,MAAZjF,EAAK,IAA0B,MAAZA,EAAK,IACnBA,EAAAA,EAAKyE,MAAM,GAEdrD,EAAQyD,OACLG,IAAUA,EAAW5D,EAAQyD,OAAO7E,IAEjC6E,EAAAA,UAGFA,EAAAA,OAAO7E,GAAQwE,EAEnBA,EACGQ,GACKG,EAAAA,iBAAiBnF,EAAM0E,GAGzBU,EAAAA,oBAAoBpF,EAAM0E,IAE3B1E,KAAQoB,GAAoB,SAATpB,IAAoB8C,EACxC9C,EAAAA,GAAiB,MAATwE,EAAgB,GAAKA,EACnB,MAATA,IAA2B,IAAVA,GAClBa,EAAAA,aAAarF,EAAMwE,GAGhB,MAATA,IAA2B,IAAVA,GACXc,EAAAA,gBAAgBtF,GAiFrBuF,SAAAA,EAAc1C,EAAQzB,EAASb,GAC7BiF,SAAAA,IACAC,EAAAA,YAhBFC,SAAAA,EAAetE,EAASb,GAC3BN,IAAAA,EAAaM,EAAKN,WAClBA,GAAAA,EAAY,CACT,IAAA,IAAIoD,EAAI,EAAGA,EAAI9C,EAAKH,SAASF,OAAQmD,IACzBjC,EAAAA,EAAQI,WAAW6B,GAAI9C,EAAKH,SAASiD,IAGlDpD,EAAW0F,WACFA,EAAAA,UAAUvE,GAGlBA,OAAAA,EAKcsE,CAAetE,EAASb,IAGzCmD,IAAAA,EAAKnD,EAAKN,YAAcM,EAAKN,WAAW2F,SACxClC,EACCtC,EAAAA,EAASoE,GAEZA,KAwGL,OAAA,eAAA,QAAA,cAAA,OAAA,IArYezF,QAAAA,EAAAA,EA4BAW,QAAAA,IAAAA;;;;ACwMhB,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GA5LA,SAAA,EACI,EACA,EACA,GAMM,IAAA,KA+EC,OA9EA,OAAA,QAAQ,GACV,IAAI,SAAC,GAAE,IAAA,EAAA,EAAA,GAAS,EAAA,EAAA,GAEP,EAAkB,EAAQ,OAAS,EAAW,QAAU,QAExD,EAAW,KACV,GAAY,cAAgB,KAAM,IAGrC,GAAA,EAAY,MAAM,kBAAmB,CAG/B,IAAA,EAAqB,EAAa,EAAY,MAAM,mBAC9C,EAAA,mBACC,QAAA,EAAmB,QACrB,MAAA,EAAmB,MAAM,MACzB,MAAA,EAAmB,MACpB,KAAA,EAAmB,MAAM,MAKnC,GAAA,EAAY,MAAM,UAAW,CACvB,IAAA,EAAU,IAAI,KAAK,EAAY,MAAM,WAC/B,EAAA,MAAM,UAAY,EAAQ,eAGnC,OAAA,QAAQ,EAAW,MAAM,gBAC3B,IAAI,SAAC,GAAE,IAAA,EAAA,EAAA,GAAS,EAAA,EAAA,GACT,GAAY,WAAZ,EAAsB,CAEhB,IAKF,EALE,EAA2B,EAAW,GACtC,EAA6B,EAC9B,OAAQ,GAAmB,QAC1B,EAAc,EAAa,GAC3B,EAAkB,EAAQ,OAAS,EAAY,QAAU,QAEzD,EAAc,EAAY,MAAM,OAClC,GACY,EAAA,IACR,SAAC,GAAC,IAAA,EAAA,EAAA,MAAO,EAAA,EAAA,SACS,YAAV,IACiB,EAAA,EAAkB,OAAS,KAKxD,IACY,EAAA,QACC,QAAA,EACH,KAAA,EACC,MAAA,EAAY,MACZ,MAAA,EACO,aAAA,EACT,MAAA,KAAM,EAAY,cAKnB,EAAA,cACF,EAAA,IAAI,SAAC,GAEL,IAAA,EAAa,EAAc,GAAW,GAAW,QACjD,EAAc,EAAa,GAC3B,EAAkB,EAAQ,OAAS,EAAY,QAAU,QACnD,EAAA,WAAW,MACZ,QAAA,EACD,KAAA,EACC,MAAA,EACE,QAAA,EACF,MAAA,EAAY,YAKzB,EAAA,GAAY,IAG3B,EAGX,SAAA,EACI,EACA,EACA,GAOM,IAAA,GAEU,QACL,MAAA,gBACA,MAAA,QACE,QAAA,WACA,aAMP,KACC,OAAA,QAAQ,GACV,IAAI,SAAC,GAAE,IAAA,EAAA,EAAA,GAAS,EAAA,EAAA,GACR,EAGG,EAAS,gBAAgB,SAAS,KACjB,EAAA,GAAY,GAHhB,EAAA,GAAY,IAUlC,OAAA,QAAQ,GACV,IAAI,SAAC,GAAE,EAAA,GAAA,IAAS,EAAA,EAAA,GAER,EAAgB,OAAO,QAAS,EAAS,OAO1B,EAAA,OAAO,QAAS,EAAS,OAAQ,QANjC,EAAA,OAAO,QAAS,EAAS,QAC9B,MAAA,EAAS,MACT,MAAA,EAAS,MACT,MAAA,GAMX,EAAS,OAAS,EAAS,MAAM,YAC1B,OAAA,QAAQ,EAAS,MAAM,YACzB,IAAI,SAAC,GAAE,IAAA,EAAA,EAAA,GAAS,EAAA,EAAA,GAER,EAAiB,KACD,EAAA,IACN,MAAA,EACA,MAAA,EACE,QAAA,WACA,aAGX,IAAA,EAAc,EAAiB,GAAU,QACrC,EAAA,IACN,SAAC,GACO,GAAC,EAAa,GASD,EAAA,GAAQ,YATE,CACjB,IAAA,EAAwB,EAAY,GAAW,GAC/C,EAA6B,EAAW,EAAQ,SACzC,EAAA,IACF,MAAA,EAAgB,MAChB,MAAA,EAAgB,QAChB,MAAA,UAYrC,IAAA,EAAqB,OAAO,OAAO,GAYlC,OAXY,EAAA,KACf,SAAC,EAAiB,GACV,OAAA,EAAE,MAAQ,EAAE,MACL,EACA,EAAE,MAAQ,EAAE,OACX,EAEL,IAIR,EAGX,SAAA,EAA4B,EAAsB,GACxC,IAAA,EAAkB,EAAO,QAexB,OAZI,EAAA,KACP,SAAC,EAAc,GACP,OAAA,EAAE,MAAM,UAAY,EAAE,MAAM,UACrB,EACA,EAAE,MAAM,YAAc,EAAE,MAAM,WAC7B,EAEL,IAGJ,EAAA,UAEJ,EAhBX,QAAA,YAAA,EA5LA,QAAA,aAAA,EA2FA,QAAA,gBAAA,EAiGA,QAAA,YAAA;;ACrDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,QAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,QAAA,QAAA,OAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,SAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,EAAA,EAAA,OAAA,QAAA,YAAA,EA7KA,IAAA,EAAA,QAAA,YAGA,SAAA,EAAqC,GAC3B,IAAA,KAUC,OATH,GACa,EAAA,IAAI,SAAC,GACP,OAAA,OAAO,EAAG,SAAS,IAAI,SAAC,GACvB,EAAG,SACQ,EAAA,MAAO,EAAG,MAAO,EAAG,YAKxC,EAGX,SAAA,EACI,EACA,EACA,GAEI,IAAA,EAAuB,EAAO,QAqD3B,OAjDH,IACkB,EAAA,EAAgB,OAC9B,SAAC,GACU,OAAA,EAAO,gBAAgB,SAAS,MAK/C,EAAiB,SACC,EAAA,EAAgB,OAAO,SAAC,GAClC,IAAA,GAAW,EAoCR,OAhCU,EAAA,IAAI,SAAC,GAAE,IAAA,EAAA,EAAA,GAAS,EAAA,EAAA,GAEzB,GAAY,WAAZ,EAEe,KADX,EAAO,QAAU,EAAO,OAAO,UAAY,QAK5C,GAAgB,UAAZ,EAEQ,EADX,EAAO,QAAU,MAKlB,CAEG,IAAA,EAAa,EAAO,WACtB,EACW,EAAA,IACP,SAAC,GACO,EAAU,UAAY,GACtB,EAAU,UAAY,IACX,GAAA,KAKZ,GAAA,KAKhB,KAGR,EAxEX,QAAA,qBAAA,EAcA,QAAA,aAAA,EA0EA,IAAA,EAAA,WAgFA,OAhFA,WAAA,IAAA,EAAA,KACI,KAAA,SAAW,SAAC,GAAmB,OAAC,MAAK,IACrC,KAAA,gBAAkB,SAAC,GAAqB,OAAC,aAAc,IACvD,KAAA,SAAW,WAAM,OAAA,SAAC,GAAkB,OAAA,IACpC,KAAA,YAAc,SAAC,GAAyB,OAAC,WAAU,IACnD,KAAA,gBAAkB,SAAC,GAA0B,OAAC,aAAY,IAE1D,KAAA,cAAgB,WAAM,OAAA,SAAC,EAAe,GAC9B,IAAA,EAAU,OAAO,OAAO,EAAM,WAoB3B,OAjBH,EAAM,aACI,EAAA,EAAQ,OAAO,SAAC,GAEf,OAFgB,EAAA,MACH,IADU,EAAA,SAEnB,cAAc,SAAS,EAAM,WAAW,kBASjD,EAAA,EAAa,EAH6B,EAAqB,EAAM,cAG7B,EAAM,eAKhD,QAFE,EAAA,EAAA,YAAY,EAAS,EAAM,eAKzC,KAAA,MAAQ,SAAC,GAAoB,OAAA,SAAC,EAAe,GAGrC,GAAE,EAAO,YAAe,EAAO,WAA/B,CAKE,IAAA,EAAwB,EAAA,aAC1B,EAAO,UACP,EAAO,WACP,EAAM,OAEJ,EAA+B,EAAA,gBACjC,EAAO,WAAY,EAAW,EAAM,cAEjC,OADC,EAAA,iBAEK,UAAA,EACG,aAAA,GAdJ,EAAA,gBAAgB,iDAkBhC,KAAA,QAAU,SAAC,GAAkB,OAAA,SAAO,EAAe,GAAiB,OAAA,EAAA,OAAA,OAAA,EAAA,WA6BxE,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA1BgB,EAAA,SAAS,GACT,EAAA,aAAY,GACZ,EAAA,gBAAgB,IAwBhC,EAAA,MAAA,EAAA,KAAA,EArBuC,OAqBvC,EAAA,KAAA,MAAA,EAAA,EAAA,CAAA,KArBuC,EAAM,MAAM,IAqBnD,KAAA,EApBgB,GAAoB,OADG,EAAA,EAAA,QACd,OAEH,MAAA,MAAM,EAAS,YAED,OAAA,EAAM,EAAS,QAgBnD,KAAA,EAAA,OAhBoC,EAAA,EAAA,OAChB,EAAA,MAAM,GACN,EAAA,iBAcpB,EAAA,GAAA,KAAA,EAXkB,MAWlB,EAAA,EAAA,OAZoB,EAAA,gBAAgB,UAAY,EAAM,SACpC,IAAI,MAAM,EAAM,SAWlC,KAAA,EAAA,OATgB,EAAA,aAAY,IAS5B,UAPI,KAAA,cAAgB,SAAC,GAAwB,OAAC,WAAU,IACpD,KAAA,gBAAkB,WAAM,OAAA,SAAC,GAEd,OAAC,aADqB,EAAM,aAAY,YA7EvD,GAkFA,QAAA,QAAe;;ACvKf,aAAA,QAAA,YAAA,EARA,IAAA,EAAA,QAAA,YAQA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,QACb,OAAA,EAAA,EAAA,IAAA,KACI,EAAA,EAAA,UACI,MAAM,oBACN,QAAS,WAAM,OAAA,QAAQ,IAAI,SAAU,EAAQ,cAAW;;ACNpE,aAAA,QAAA,YAAA,EANA,IAAA,EAAA,QAAA,YAMA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,aACT,GAAA,EAEI,OAAA,EAAA,EAAA,OAAK,MAAM,2BAAX,iBAAoD;;ACPhE,aAAA,QAAA,YAAA,EAFA,IAAA,EAAA,QAAA,YAEA,QAAA,QAAe,WACX,OAAA,EAAA,EAAA,OAAK,MAAM,kBACP,EAAA,EAAA,OAAK,MAAM,aAAa,KAAK,aAAY,aAAY,cACjD,EAAA,EAAA,KAAG,MAAM,uBAAqB,YAC9B,EAAA,EAAA,KAAG,MAAM,mBAAiB,aAC1B,EAAA,EAAA,MAAI,MAAM,mBACN,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,KAAG,MAAM,kBAAiB,aAAY,eAAa,MAEvD,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,QAAM,MAAM,uBAAqB,MAErC,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,KAAG,MAAM,kBAAiB,aAAY,gBAAc,OAExD,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,KAAG,MAAM,6BAA4B,aAAY,UAAS,eAAc,QAAM,OAElF,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,KAAG,MAAM,kBAAiB,aAAY,gBAAc,OAExD,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,QAAM,MAAM,uBAAqB,MAErC,EAAA,EAAA,KAAA,KACI,EAAA,EAAA,KAAG,MAAM,kBAAiB,aAAY,gBAAc;;ACnBxE,aAAA,QAAA,YAAA,EARA,IAAA,EAAA,QAAA,YAQA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,IAAK,EAAA,EAAA,MACxB,OAAA,EAAA,EAAA,KAAG,MAAM,2BACN,KAAM,GACL,EAAA,EAAA,UAAQ,MAAM,4BACN,MAAM,aACT,GACG,EAAA,EAAA,OAAK,IAAK,EAAK,OAAO,KAAK,MAAM,QAIzC,EAAA,EAAA,OAAA,KAAO;;ACZf,aAAA,QAAA,YAAA,EANA,IAAA,EAAA,QAAA,YAMA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,SACT,GAAA,EAEI,OAAA,EAAA,EAAA,QAAM,MAAM,8BACR,EAAA,EAAA,QAAM,MAAM,QACR,EAAA,EAAA,KAAG,MAAM,kBAEb,EAAA,EAAA,OAAA,KAAQ;;ACLxB,aAAA,QAAA,YAAA,EARA,IAAA,EAAA,QAAA,YAQA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,MACnB,OAAA,EAAA,EAAA,QAAM,MAAM,kBACJ,EAAA,EAAA,KAAG,KAAM,GACJ;;ACHjB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EARA,IAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,gBAMA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,OACb,OAAA,EAAA,EAAA,OAAK,MAAM,QACN,EAAO,IAAI,SAAA,GACJ,OAAA,EAAA,EAAC,EAAA,SACG,IAAK,EAAU,KACf,KAAM,EAAU,KAChB,MAAO,EAAU;;ACRrC,aAAA,QAAA,YAAA,EANA,IAAA,EAAA,QAAA,YAMA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,KACb,OAAA,EAAA,EAAA,UAAQ,MAAM,oBACV,EAAA,EAAA,OAAK,IAAK;;ACIlB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EAZA,IAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,iBAEA,EAAA,EAAA,QAAA,eAMA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,SAEP,EAAkB,EAAS,WAAW,IACxC,SAAC,GACG,OACS,IAAA,EAAU,QACT,KAAA,EAAU,KACT,MAAA,EAAU,SAKzB,OAAA,EAAA,EAAA,OAAK,MAAM,qBACP,EAAA,EAAA,WAAS,MAAM,SACX,EAAA,EAAA,OAAK,MAAM,cACL,EAAS,mBAAqB,EAAS,kBAAkB,MACvD,EAAA,EAAA,OAAK,MAAM,eACP,EAAA,EAAC,EAAA,SAAS,KAAM,EAAS,kBAAkB,SAIvD,EAAA,EAAA,OAAK,MAAM,iBACP,EAAA,EAAA,OAAK,MAAM,WACP,EAAA,EAAA,IAAA,KACI,EAAA,EAAA,KAAG,KAAM,EAAS,MACd,EAAA,EAAA,SAAA,KAAS,EAAS,QAEtB,EAAA,EAAA,KAAA,MACA,EAAA,EAAA,OAAA,KAAO,EAAS,WAGxB,EAAA,EAAA,OAAK,MAAM,mBACf,EAAA,EAAA,OAAK,MAAM,cACN,EAAS,QACN,EAAA,EAAC,EAAA,SACG,KAAM,EAAS,OAAO,KACtB,IAAK,EAAS,OAAO,aACrB,MAAO,EAAS,OAAO,QAI/B,EAAA,EAAA,QAAM,MAAM,cACA,EAAA,EAAC,EAAA,SAAW,OAAQ,MAGpC,EAAA,EAAA,OAAK,MAAM,uCACN,EAAS,MAAM,UACZ,EAAA,EAAC,EAAA,SAAS,SAAU,EAAS,MAAM,WAEvC,EAAA,EAAA,QAAM,MAAM,cACC,EAAS,MAAM;;ACrDhD,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EATA,IAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,aAOA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,OACT,GAAA,EAEI,OAAA,EAAA,EAAA,MAAA,KACK,GAAU,OAAO,OAAO,GAAQ,IAAI,SAAA,GACjC,OAAA,EAAA,EAAC,EAAA,SAAO,SAAU;;ACNtC,aAAA,QAAA,YAAA,EARA,IAAA,EAAA,QAAA,YAQA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,QACb,OAAA,EAAA,EAAA,OAAK,MAAM,SACP,EAAA,EAAA,KAAG,MAAM,sCACL,EAAA,EAAA,SACI,MAAM,QACN,KAAK,OACL,YAAY,oBACZ,WAAS,EACT,QACI,SAAC,GAAC,IAAA,EAAA,EAAA,OACU,EAAA,cAAc,EAAE,OAChB,EAAA,mBAGpB,EAAA,EAAA,QAAM,MAAM,yBACV,EAAA,EAAA,KAAG,MAAM;;ACbvB,aAAA,QAAA,YAAA,EAVA,IAAA,EAAA,QAAA,YAUA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,QAAS,EAAA,EAAA,QACtB,OAAA,EAAA,EAAA,MAAA,KAEQ,OAAO,OAAO,GAAS,IAAI,SAAC,GACxB,OAAA,EAAA,EAAA,OAAK,MAAM,WACP,EAAA,EAAA,SAAO,MAAM,0BACT,EAAA,EAAA,SACI,KAAK,WACL,KAAM,EAAO,MACb,QAAS,EAAO,QAChB,QAAS,SAAC,GAAC,IAAA,EAAA,EAAA,OACA,EAAA,QAAU,EAAO,QAChB,EAAA,kBACA,EAAA,mBAGhB,EAAA,EAAA,QAAM,MAAM,uBAAuB,EAAO,MAA1C,KAAmD,EAAO,MAA1D;;AChBxB,aAAA,QAAA,YAAA,EAVA,IAAA,EAAA,QAAA,YAUA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,QAAS,EAAA,EAAA,QACtB,OAAA,EAAA,EAAA,MAAA,KAEQ,OAAO,OAAO,GAAS,IACnB,SAAC,GACG,OAAA,EAAA,EAAA,OAAK,MAAM,WACP,EAAA,EAAA,SAAO,MAAM,uBACT,EAAA,EAAA,SACI,KAAK,QACL,MAAO,EAAO,MACd,QAAS,SAAC,GAAC,IAAA,EAAA,EAAA,OACA,EAAA,QAAU,EAAO,QAChB,EAAA,qBAGhB,EAAA,EAAA,QAAM,MAAM,aAAa,EAAO;;ACf5D,aAAA,QAAA,YAAA,EAVA,IAAA,EAAA,QAAA,YAUA,QAAA,QAAe,SAAC,GAAC,EAAA,QAAS,EAAA,QACtB,OAAA,EAAA,EAAA,MAAA,KAAA;;ACEJ,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EAbA,IAAA,EAAA,QAAA,YAGA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,oBAQA,QAAA,QAAe,SAAC,GAAC,IAAA,EAAA,EAAA,aAAc,EAAA,EAAA,QAC3B,OAAA,EAAA,EAAA,MAAA,KACK,EAAa,IAAI,SAAC,GACP,GAAA,OAAO,KAAK,EAAG,SAAS,OAEpB,OAAA,EAAA,EAAA,OAAK,MAAM,oBACP,EAAA,EAAA,KAAG,MAAM,cACJ,EAAG,MADR,IACgB,EAAG,SAEjB,WACU,OAAA,EAAG,SACF,IAAA,WACM,OAAA,EAAA,EAAC,EAAA,SACJ,QAAS,EAAG,QACZ,QAAS,IAEZ,IAAA,QACM,OAAA,EAAA,EAAC,EAAA,SACJ,QAAS,EAAG,QACZ,QAAS,IAEZ,IAAA,SACM,OAAA,EAAA,EAAC,EAAA,SACJ,QAAS,EAAG,QACZ,QAAS,IAEjB,QACW,OAAA,MAlBjB;;ACP9B,aAfA,SAAA,EAAyB,GAEd,IADH,IAAA,EAAuB,GACpB,EAAG,YAAY,CAGd,GADI,GADH,EAAA,EAAG,YACG,aAAa,2BAEb,OAAA,EACJ,GAAiC,SAA7B,EAAG,QAAQ,cAClB,QAOZ,SAAA,EAAgC,GAErB,IADH,IAAA,EAA8B,GAC3B,EAAG,YAAY,CAGd,GADW,GADV,EAAA,EAAG,YACU,aAAa,+BAEpB,OAAA,EACJ,GAAiC,SAA7B,EAAG,QAAQ,cAClB,QARZ,QAAA,YAAA,EAfA,QAAA,SAAA,EAeA,QAAA,gBAAA;;ACQA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EAvBA,IAAA,EAAA,QAAA,YAGA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,cAEA,EAAA,QAAA,WAEM,EAAW,SAAC,EAAsB,GAC9B,IAAA,EAAQ,EAAA,SAAS,GACnB,GACQ,EAAA,QAAQ,GAEd,IAAA,EAAe,EAAA,gBAAgB,GACjC,GAAiC,SAAjB,GACR,EAAA,gBAAgB,IAIhC,QAAA,QAAe,SAAC,EAAe,GAC3B,OAAA,EAAA,EAAA,OACI,MAAM,mBACN,SAAU,SAAC,GAAyB,OAAA,EAAS,EAAS,KAEtD,EAAA,EAAA,OAAK,MAAM,uBACP,EAAA,EAAA,OAAK,MAAM,kBACP,EAAA,EAAC,EAAA,SAAa,aAAc,EAAM,eAClC,EAAA,EAAC,EAAA,SAAU,QAAS,IACnB,EAAM,cACP,EAAA,EAAA,OAAK,MAAM,2BACN,EAAM,gBAKnB,EAAA,EAAA,OAAK,MAAM,WACP,EAAA,EAAA,OAAK,MAAM,UACP,EAAA,EAAC,EAAA,SAAQ,aAAc,EAAM,aAAc,QAAS,KAExD,EAAA,EAAA,OAAK,MAAM,yBACP,EAAA,EAAC,EAAA,SAAQ,OAAQ,EAAM,UACvB,EAAA,EAAC,EAAA,QAAU,MACX,EAAA,EAAC,EAAA,SAAU,QAAS;;ACmDpC,aAAA,QAAA,YAAA,EAdA,IAAM,GACU,YAAA,EACE,aAAA,gBACA,gBACF,WAAA,GACD,aACF,WACG,YACC,QAAA,YACE,UAAA,GACJ,MAAA,IAIf,QAAA,QAAe;;ACxFf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,GAAA,QAAA,IAAA,QAAA,YAAA,EATA,IAAA,EAAA,QAAA,YAEA,QAAA,4BACA,QAAA,uBAEA,IAAA,EAAA,EAAA,QAAA,8BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BAEA,EAAA,IACI,EAAA,QACA,IAAI,EAAA,QACJ,EAAA,QACA,SAAS,eAAe","file":"kaybee_bulma.map","sourceRoot":"..","sourcesContent":["export function h(name, attributes) {\n  var rest = []\n  var children = []\n  var length = arguments.length\n\n  while (length-- > 2) rest.push(arguments[length])\n\n  while (rest.length) {\n    var node = rest.pop()\n    if (node && node.pop) {\n      for (length = node.length; length--; ) {\n        rest.push(node[length])\n      }\n    } else if (node != null && node !== true && node !== false) {\n      children.push(node)\n    }\n  }\n\n  return typeof name === \"function\"\n    ? name(attributes || {}, children)\n    : {\n        nodeName: name,\n        attributes: attributes || {},\n        children: children,\n        key: attributes && attributes.key\n      }\n}\n\nexport function app(state, actions, view, container) {\n  var map = [].map\n  var rootElement = (container && container.children[0]) || null\n  var oldNode = rootElement && recycleElement(rootElement)\n  var lifecycle = []\n  var skipRender\n  var isRecycling = true\n  var globalState = clone(state)\n  var wiredActions = wireStateToActions([], globalState, clone(actions))\n\n  scheduleRender()\n\n  return wiredActions\n\n  function recycleElement(element) {\n    return {\n      nodeName: element.nodeName.toLowerCase(),\n      attributes: {},\n      children: map.call(element.childNodes, function(element) {\n        return element.nodeType === 3 // Node.TEXT_NODE\n          ? element.nodeValue\n          : recycleElement(element)\n      })\n    }\n  }\n\n  function resolveNode(node) {\n    return typeof node === \"function\"\n      ? resolveNode(node(globalState, wiredActions))\n      : node != null\n        ? node\n        : \"\"\n  }\n\n  function render() {\n    skipRender = !skipRender\n\n    var node = resolveNode(view)\n\n    if (container && !skipRender) {\n      rootElement = patch(container, rootElement, oldNode, (oldNode = node))\n    }\n\n    isRecycling = false\n\n    while (lifecycle.length) lifecycle.pop()()\n  }\n\n  function scheduleRender() {\n    if (!skipRender) {\n      skipRender = true\n      setTimeout(render)\n    }\n  }\n\n  function clone(target, source) {\n    var out = {}\n\n    for (var i in target) out[i] = target[i]\n    for (var i in source) out[i] = source[i]\n\n    return out\n  }\n\n  function setPartialState(path, value, source) {\n    var target = {}\n    if (path.length) {\n      target[path[0]] =\n        path.length > 1\n          ? setPartialState(path.slice(1), value, source[path[0]])\n          : value\n      return clone(source, target)\n    }\n    return value\n  }\n\n  function getPartialState(path, source) {\n    var i = 0\n    while (i < path.length) {\n      source = source[path[i++]]\n    }\n    return source\n  }\n\n  function wireStateToActions(path, state, actions) {\n    for (var key in actions) {\n      typeof actions[key] === \"function\"\n        ? (function(key, action) {\n            actions[key] = function(data) {\n              var result = action(data)\n\n              if (typeof result === \"function\") {\n                result = result(getPartialState(path, globalState), actions)\n              }\n\n              if (\n                result &&\n                result !== (state = getPartialState(path, globalState)) &&\n                !result.then // !isPromise\n              ) {\n                scheduleRender(\n                  (globalState = setPartialState(\n                    path,\n                    clone(state, result),\n                    globalState\n                  ))\n                )\n              }\n\n              return result\n            }\n          })(key, actions[key])\n        : wireStateToActions(\n            path.concat(key),\n            (state[key] = clone(state[key])),\n            (actions[key] = clone(actions[key]))\n          )\n    }\n\n    return actions\n  }\n\n  function getKey(node) {\n    return node ? node.key : null\n  }\n\n  function eventListener(event) {\n    return event.currentTarget.events[event.type](event)\n  }\n\n  function updateAttribute(element, name, value, oldValue, isSvg) {\n    if (name === \"key\") {\n    } else if (name === \"style\") {\n      for (var i in clone(oldValue, value)) {\n        var style = value == null || value[i] == null ? \"\" : value[i]\n        if (i[0] === \"-\") {\n          element[name].setProperty(i, style)\n        } else {\n          element[name][i] = style\n        }\n      }\n    } else {\n      if (name[0] === \"o\" && name[1] === \"n\") {\n        name = name.slice(2)\n\n        if (element.events) {\n          if (!oldValue) oldValue = element.events[name]\n        } else {\n          element.events = {}\n        }\n\n        element.events[name] = value\n\n        if (value) {\n          if (!oldValue) {\n            element.addEventListener(name, eventListener)\n          }\n        } else {\n          element.removeEventListener(name, eventListener)\n        }\n      } else if (name in element && name !== \"list\" && !isSvg) {\n        element[name] = value == null ? \"\" : value\n      } else if (value != null && value !== false) {\n        element.setAttribute(name, value)\n      }\n\n      if (value == null || value === false) {\n        element.removeAttribute(name)\n      }\n    }\n  }\n\n  function createElement(node, isSvg) {\n    var element =\n      typeof node === \"string\" || typeof node === \"number\"\n        ? document.createTextNode(node)\n        : (isSvg = isSvg || node.nodeName === \"svg\")\n          ? document.createElementNS(\n              \"http://www.w3.org/2000/svg\",\n              node.nodeName\n            )\n          : document.createElement(node.nodeName)\n\n    var attributes = node.attributes\n    if (attributes) {\n      if (attributes.oncreate) {\n        lifecycle.push(function() {\n          attributes.oncreate(element)\n        })\n      }\n\n      for (var i = 0; i < node.children.length; i++) {\n        element.appendChild(\n          createElement(\n            (node.children[i] = resolveNode(node.children[i])),\n            isSvg\n          )\n        )\n      }\n\n      for (var name in attributes) {\n        updateAttribute(element, name, attributes[name], null, isSvg)\n      }\n    }\n\n    return element\n  }\n\n  function updateElement(element, oldAttributes, attributes, isSvg) {\n    for (var name in clone(oldAttributes, attributes)) {\n      if (\n        attributes[name] !==\n        (name === \"value\" || name === \"checked\"\n          ? element[name]\n          : oldAttributes[name])\n      ) {\n        updateAttribute(\n          element,\n          name,\n          attributes[name],\n          oldAttributes[name],\n          isSvg\n        )\n      }\n    }\n\n    var cb = isRecycling ? attributes.oncreate : attributes.onupdate\n    if (cb) {\n      lifecycle.push(function() {\n        cb(element, oldAttributes)\n      })\n    }\n  }\n\n  function removeChildren(element, node) {\n    var attributes = node.attributes\n    if (attributes) {\n      for (var i = 0; i < node.children.length; i++) {\n        removeChildren(element.childNodes[i], node.children[i])\n      }\n\n      if (attributes.ondestroy) {\n        attributes.ondestroy(element)\n      }\n    }\n    return element\n  }\n\n  function removeElement(parent, element, node) {\n    function done() {\n      parent.removeChild(removeChildren(element, node))\n    }\n\n    var cb = node.attributes && node.attributes.onremove\n    if (cb) {\n      cb(element, done)\n    } else {\n      done()\n    }\n  }\n\n  function patch(parent, element, oldNode, node, isSvg) {\n    if (node === oldNode) {\n    } else if (oldNode == null || oldNode.nodeName !== node.nodeName) {\n      var newElement = createElement(node, isSvg)\n      parent.insertBefore(newElement, element)\n\n      if (oldNode != null) {\n        removeElement(parent, element, oldNode)\n      }\n\n      element = newElement\n    } else if (oldNode.nodeName == null) {\n      element.nodeValue = node\n    } else {\n      updateElement(\n        element,\n        oldNode.attributes,\n        node.attributes,\n        (isSvg = isSvg || node.nodeName === \"svg\")\n      )\n\n      var oldKeyed = {}\n      var newKeyed = {}\n      var oldElements = []\n      var oldChildren = oldNode.children\n      var children = node.children\n\n      for (var i = 0; i < oldChildren.length; i++) {\n        oldElements[i] = element.childNodes[i]\n\n        var oldKey = getKey(oldChildren[i])\n        if (oldKey != null) {\n          oldKeyed[oldKey] = [oldElements[i], oldChildren[i]]\n        }\n      }\n\n      var i = 0\n      var k = 0\n\n      while (k < children.length) {\n        var oldKey = getKey(oldChildren[i])\n        var newKey = getKey((children[k] = resolveNode(children[k])))\n\n        if (newKeyed[oldKey]) {\n          i++\n          continue\n        }\n\n        if (newKey != null && newKey === getKey(oldChildren[i + 1])) {\n          if (oldKey == null) {\n            removeElement(element, oldElements[i], oldChildren[i])\n          }\n          i++\n          continue\n        }\n\n        if (newKey == null || isRecycling) {\n          if (oldKey == null) {\n            patch(element, oldElements[i], oldChildren[i], children[k], isSvg)\n            k++\n          }\n          i++\n        } else {\n          var keyedNode = oldKeyed[newKey] || []\n\n          if (oldKey === newKey) {\n            patch(element, keyedNode[0], keyedNode[1], children[k], isSvg)\n            i++\n          } else if (keyedNode[0]) {\n            patch(\n              element,\n              element.insertBefore(keyedNode[0], oldElements[i]),\n              keyedNode[1],\n              children[k],\n              isSvg\n            )\n          } else {\n            patch(element, oldElements[i], null, children[k], isSvg)\n          }\n\n          newKeyed[newKey] = children[k]\n          k++\n        }\n      }\n\n      while (i < oldChildren.length) {\n        if (getKey(oldChildren[i]) == null) {\n          removeElement(element, oldElements[i], oldChildren[i])\n        }\n        i++\n      }\n\n      for (var i in oldKeyed) {\n        if (!newKeyed[i]) {\n          removeElement(element, oldKeyed[i][0], oldKeyed[i][1])\n        }\n      }\n    }\n    return element\n  }\n}\n","import { IFilterGroup, IResource, IResources, IResultInfo } from \"./State\";\n\nexport interface IDbProps {\n    [ propname: string ]: any;\n}\n\nexport interface IDbResource {\n    docname: string;\n    title: string;\n    parent_docnames: string[];\n    rtype: string;\n    props: IDbProps;\n    excerpt: string;\n    published: string;\n}\n\nexport interface IDbResources {\n    [ docname: string ]: IDbResource;\n}\n\nexport interface IDbReference {\n    count: number;\n    docname: string;\n}\n\nexport interface IDbReferenceType {\n    [ reftype: string ]: IDbReference;\n}\n\nexport interface IDbReferences {\n    [ reftype: string ]: IDbReferenceType;\n}\n\nexport interface IDbJson {\n    resources: IDbResources;\n    references: IDbReferences;\n}\n\n/* Some conversion functions for working with external data */\n\nexport function setResources(\n    dbResources: IDbResources,\n    dbReferences: IDbReferences,\n    dbUrl: string\n): IResources {\n    /* Called from actions.setDb to flatten references and populate\n    state.resources.\n     */\n\n    const newResources: IResources = {};\n    Object.entries(dbResources)\n        .map(([ docname, dbResource ]: [ string, IDbResource ]) => {\n\n            const newResourceHref = dbUrl + \"/../\" + dbResource.docname + \".html\";\n\n            const newResource: IResource = {\n                ...dbResource, references: [], href: newResourceHref\n            };\n\n            if (newResource.props.primary_reference) {\n                // Take the docname pointed at by primary_reference, get the\n                // resource for it, and get the logo property\n                const primaryRefResource = dbResources[ newResource.props.primary_reference ];\n                newResource.primary_reference = {\n                    docname: primaryRefResource.docname,\n                    label: primaryRefResource.props.label,\n                    title: primaryRefResource.title,\n                    logo: primaryRefResource.props.logo\n                };\n            }\n\n            // Format the published date.\n            if (newResource.props.published) {\n                const newDate = new Date(newResource.props.published);\n                newResource.props.published = newDate.toDateString();\n            }\n\n            Object.entries(dbResource.props.references || {})\n                .map(([ reftype, reflabels ]: [ string, any ]) => {\n                    if (reftype === \"author\") {\n                        // Get the primary author, if any, as a flattened resource\n                        const firstAuthorLabel: string = reflabels[ 0 ];\n                        const firstAuthorDocname: string = dbReferences\n                            .author[ firstAuthorLabel ].docname;\n                        const firstAuthor = dbResources[ firstAuthorDocname ];\n                        const firstAuthorHref = dbUrl + \"/../\" + firstAuthor.docname + \".html\";\n                        let firstAuthorSrc;\n                        const firstImages = firstAuthor.props.images;\n                        if (firstImages) {\n                            firstImages.map(\n                                ({usage, filename}: any) => {\n                                    if (usage === \"icon_24\") {\n                                        firstAuthorSrc = firstAuthorHref + \"/../\" + filename;\n                                    }\n                                }\n                            );\n                        }\n                        if (firstAuthor) {\n                            newResource.author = {\n                                docname: firstAuthorDocname,\n                                href: firstAuthorHref,\n                                title: firstAuthor.title,\n                                label: firstAuthorLabel,\n                                thumbnailUrl: firstAuthorSrc,\n                                props: {...firstAuthor.props}\n                            };\n                        }\n                    } else {\n                        // Handle other kinds of references\n                        newResource.references = [];\n                        reflabels.map((reflabel: string) => {\n                            // Get the reference for this label\n                            const refDocname = dbReferences[ reftype ][ reflabel ].docname;\n                            const refResource = dbResources[ refDocname ];\n                            const refResourceHref = dbUrl + \"/../\" + refResource.docname + \".html\";\n                            newResource.references.push({\n                                reftype,\n                                href: refResourceHref,\n                                label: reflabel,\n                                docname: refDocname,\n                                title: refResource.title\n                            });\n                        });\n                    }\n                });\n            newResources[ docname ] = newResource;\n        });\n\n    return newResources;\n}\n\nexport function setFilterGroups(\n    references: IDbReferences,\n    resources: IResources,\n    filterParent: string | undefined) {\n    /* Called from setDb to populate state.filterGroups */\n\n    interface INewFilterGroups {\n        [ reftyp: string ]: IFilterGroup\n    }\n\n    const newFilterGroups: INewFilterGroups = {};\n    // Make a filter group for resource types\n    newFilterGroups.rtypes = {\n        label: \"resource type\",\n        value: \"rtype\",\n        control: \"checkbox\",\n        choices: {}\n    };\n\n    // Make a copy of the resources, then filter if needed by the\n    // parent_docname if this widget only wants filter information\n    // based on place in the tree.\n    const filteredResults: IResources = {};\n    Object.entries(resources)\n        .map(([ docname, resource ]: [ string, IResource ]) => {\n            if (!filterParent) {\n                filteredResults[ docname ] = resource;\n            } else {\n                if (resource.parent_docnames.includes(filterParent)) {\n                    filteredResults[ docname ] = resource;\n                }\n            }\n        });\n\n    // Iterate through the resources and accumulate IFilterGroup info\n    // based on the actual resources, using references to get title etc.\n    Object.entries(filteredResults)\n        .map(([ docname, resource ]: [ string, IResource ]) => {\n            // Keep track of the types that we visit\n            if (!newFilterGroups.rtypes.choices[ resource.rtype ]) {\n                newFilterGroups.rtypes.choices[ resource.rtype ] = {\n                    label: resource.rtype,\n                    value: resource.rtype,\n                    count: 1\n                };\n            } else {\n                newFilterGroups.rtypes.choices[ resource.rtype ].count++;\n            }\n\n            if (resource.props && resource.props.references) {\n                Object.entries(resource.props.references)\n                    .map(([ reftype, refvalues ]: [ string, any ]) => {\n                        // If there's no reftype, make one and set label/count\n                        if (!newFilterGroups[ reftype ]) {\n                            newFilterGroups[ reftype ] = {\n                                label: reftype,\n                                value: reftype,\n                                control: \"checkbox\",\n                                choices: {}\n                            };\n                        }\n                        const thisRefType = newFilterGroups[ reftype ].choices;\n                        refvalues.map(\n                            (label: string) => {\n                                if (!thisRefType[ label ]) {\n                                    const thisRef: IDbReference = references[ reftype ][ label ];\n                                    const thisRefResource: IResource = resources[ thisRef.docname ];\n                                    thisRefType[ label ] = {\n                                        label: thisRefResource.title,\n                                        value: thisRefResource.docname,\n                                        count: 1\n                                    };\n                                } else {\n                                    thisRefType[ label ].count++;\n                                }\n                            }\n                        );\n                    });\n            }\n        });\n\n    // Now at the end, sort the filter groups by label\n    const newFilterGroupList = Object.values(newFilterGroups);\n    newFilterGroupList.sort(\n        (a: IFilterGroup, b: IFilterGroup) => {\n            if (a.label > b.label) {\n                return 1;\n            } else if (a.label < b.label) {\n                return -1;\n            }\n            return 0;\n        }\n    );\n\n    return newFilterGroupList;\n}\n\nexport function sortResults(results: IResource[], resultInfo: IResultInfo) {\n    const newResults = [ ...results ];\n\n    // First we sort, ending with a reverse\n    newResults.sort(\n        (a: IResource, b: IResource) => {\n            if (a.props.published > b.props.published) {\n                return 1;\n            } else if (a.props.published === b.props.published) {\n                return -1;\n            }\n            return 0;\n        }\n    );\n    newResults.reverse();\n\n    return newResults;\n}\n","import { ActionsType } from \"hyperapp\";\n\nimport { IDbJson, setFilterGroups, setResources, sortResults } from \"./dbjson\";\nimport { IFilterChoice, IFilterGroup, IReference, IResource, IResources, IState } from \"./State\";\n\nexport function getFilterGroupValues(filterGroups: IFilterGroup[]): Array<[ string, string ]> {\n    const keysValues: Array<[ string, string ]> = [];\n    if (filterGroups) {\n        filterGroups.map((fg: IFilterGroup) => {\n            Object.values(fg.choices).map((fc: IFilterChoice) => {\n                if (fc.checked) {\n                    keysValues.push([ fg.value, fc.value ]);\n                }\n            });\n        });\n    }\n    return keysValues;\n}\n\nexport function filterValues(\n    results: IResource[],\n    filterKeysValues: Array<[ string, string ]>,\n    filterParent: string | undefined) {\n\n    let filteredResults = [ ...results ];\n\n    // Start by filtering results based on parent, if state.filterParent\n    // has a docname to filter by\n    if (filterParent) {\n        filteredResults = filteredResults.filter(\n            (result: IResource) => {\n                return result.parent_docnames.includes(filterParent);\n            }\n        );\n    }\n\n    if (filterKeysValues.length) {\n        filteredResults = filteredResults.filter((result: IResource) => {\n            let hasMatch = false;\n\n            // For this result, iterate through the \"true\" filterGroup\n            // values, looking in references, author, etc.\n            filterKeysValues.map(([ reftype, value ]: [ string, string ]) => {\n                // Look in author\n                if (reftype === \"author\") {\n                    if (result.author && result.author.docname === value) {\n                        hasMatch = true;\n                    } else {\n                        hasMatch = false;\n                    }\n                } else if (reftype === \"rtype\") {\n                    if (result.rtype === value) {\n                        hasMatch = true;\n                    } else {\n                        hasMatch = false;\n                    }\n                } else {\n                    // Look in references\n                    const resultRefs = result.references;\n                    if (resultRefs) {\n                        resultRefs.map(\n                            (resultRef: IReference) => {\n                                if (resultRef.reftype === reftype &&\n                                    resultRef.docname === value) {\n                                    hasMatch = true;\n                                }\n                            }\n                        );\n                    } else {\n                        hasMatch = false;\n                    }\n                }\n            });\n\n            return hasMatch;\n        });\n    }\n    return filteredResults;\n}\n\nexport interface IActions {\n    setFetching: (isFetching: boolean) => { isFetching: boolean };\n    setNotification: (msg: string) => { notification: string };\n    setDbUrl: (dbUrl: string) => { dbUrl: string };\n    setFilterParent: (docname: string) => { filterParent: string };\n    getJson: (dbUrl: string) => Promise<void>;\n    setDb: (dbJson: IDbJson) => { resources: IResources, filterGroups: IFilterGroup[] };\n    getState: () => IState;\n    setFilterTerm: (filterTerm: string) => { filterTerm: string };\n    setFilterChoice: () => { filterGroups: IFilterGroup[] };\n    filterResults: () => { results: IResource[] }\n}\n\nclass Actions implements ActionsType<IState, IActions> {\n    setDbUrl = (dbUrl: string) => ({dbUrl});\n    setFilterParent = (docname: string) => ({filterParent: docname});\n    getState = () => (state: IState) => state;\n    setFetching = (isFetching: boolean) => ({isFetching});\n    setNotification = (notification: string) => ({notification});\n\n    filterResults = () => (state: IState, actions: IActions) => {\n        let results = Object.values(state.resources);\n\n        // If a filterterm, filter by that\n        if (state.filterTerm) {\n            results = results.filter(({title, excerpt}) => {\n                const tgt = title + \" \" + excerpt;\n                return tgt.toLowerCase().includes(state.filterTerm.toLowerCase());\n            });\n        }\n\n        // Now filter based on checkboxes. Start by collecting all set\n        // keys/values to filter on\n        const filterKeysValues: Array<[ string, string ]> = getFilterGroupValues(state.filterGroups);\n\n        // Filter results by matching any of the keysValues\n        results = filterValues(results, filterKeysValues, state.filterParent);\n\n        // Sort results by some criteria\n        results = sortResults(results, state.resultInfo);\n\n        return {results};\n    };\n\n    setDb = (dbJson: IDbJson) => (state: IState, actions: IActions) => {\n        // Validate/Clean up the data in any ways\n\n        if (!(dbJson.resources) && (dbJson.references)) {\n            actions.setNotification(\"Server data missing resources or references\");\n            return;\n        }\n\n        const resources: IResources = setResources(\n            dbJson.resources,\n            dbJson.references,\n            state.dbUrl as string\n        );\n        const filterGroups: IFilterGroup[] = setFilterGroups(\n            dbJson.references, resources, state.filterParent);\n        actions.filterResults();\n        return {\n            resources,\n            filterGroups\n        };\n    };\n\n    getJson = (dbUrl: string) => async (state: IState, actions: IActions) => {\n\n        // Before fetching\n        actions.setDbUrl(dbUrl);\n        actions.setFetching(true);\n        actions.setNotification(\"\");\n\n        try {\n            const response: Response = await fetch(dbUrl);\n            if (response.status !== 200) {\n                // noinspection ExceptionCaughtLocallyJS\n                throw Error(response.statusText);\n            }\n            const dbJson: IDbJson = await response.json();\n            actions.setDb(dbJson);\n            actions.filterResults();\n        } catch (error) {\n            actions.setNotification(\"Error: \" + error.message);\n            throw new Error(error.message);\n        }\n        actions.setFetching(false);\n    };\n    setFilterTerm = (filterTerm: string) => ({filterTerm});\n    setFilterChoice = () => (state: IState) => {\n        const newFilterGroups = [ ...state.filterGroups ];\n        return {filterGroups: newFilterGroups};\n    };\n}\n\nexport default Actions;\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\n\ninterface IDumpstateProps {\n    actions: IActions;\n}\n\nexport default ({actions}: IDumpstateProps) => (\n    <p>\n        <button\n            class=\"button is-primary\"\n            onclick={() => console.log(\"State:\", actions.getState())}\n        >Dump State\n        </button>\n    </p>\n)\n","import { h } from \"hyperapp\";\n\ninterface INotificationProps {\n    notification: string;\n}\n\nexport default ({notification}: INotificationProps) => {\n    if (notification) {\n        return (\n            <div class=\"notification is-primary\">Notification: {notification}</div>\n        );\n    }\n    return;\n};\n","import { h } from \"hyperapp\";\n\nexport default () => (\n    <div class=\"kbb-pagination\">\n        <nav class=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n            <a class=\"pagination-previous\">Previous</a>\n            <a class=\"pagination-next\">Next page</a>\n            <ul class=\"pagination-list\">\n                <li>\n                    <a class=\"pagination-link\" aria-label=\"Goto page 1\">1</a>\n                </li>\n                <li>\n                    <span class=\"pagination-ellipsis\">&hellip;</span>\n                </li>\n                <li>\n                    <a class=\"pagination-link\" aria-label=\"Goto page 45\">45</a>\n                </li>\n                <li>\n                    <a class=\"pagination-link is-current\" aria-label=\"Page 46\" aria-current=\"page\">46</a>\n                </li>\n                <li>\n                    <a class=\"pagination-link\" aria-label=\"Goto page 47\">47</a>\n                </li>\n                <li>\n                    <span class=\"pagination-ellipsis\">&hellip;</span>\n                </li>\n                <li>\n                    <a class=\"pagination-link\" aria-label=\"Goto page 86\">86</a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n);\n","import { h } from \"hyperapp\";\n\nexport interface IAuthorProps {\n    href: string;\n    src?: string;\n    title: string;\n}\n\nexport default ({href, src, title}: IAuthorProps) => (\n    <a class=\"level-item kbb-fl-author\"\n       href={href}>\n        <figure class=\"image is-rounded is-24x24\"\n                style=\"margin: 0\">\n            {src && (\n                <img src={src} height=\"24\" width=\"24\"/>\n            )\n            }\n        </figure>\n        <span>{title}</span>\n    </a>\n);\n","import { h } from \"hyperapp\";\n\nexport interface IDurationProps {\n    duration?: string;\n}\n\nexport default ({duration}: IDurationProps) => {\n    if (duration) {\n        return (\n            <span class=\"kbb-fl-duration level-item\">\n                <span class=\"icon\">\n                    <i class=\"fas fa-video\"/>\n                </span>\n                < span>{duration}</span>\n            </span>\n        );\n    }\n    return;\n};\n","import { h } from \"hyperapp\";\n\nexport interface IReferenceProps {\n    key?: string;\n    href: string;\n    label: string;\n}\n\nexport default ({href, label}: IReferenceProps) => (\n    <span class=\"tag is-rounded\">\n            <a href={href}>\n                {label}\n            </a>\n    </span>\n);\n","import { h } from \"hyperapp\";\n\nimport { default as Reference, IReferenceProps } from \"./Reference\";\n\nexport interface IReferencesProps {\n    values: IReferenceProps[];\n}\n\nexport default ({values}: IReferencesProps) => (\n    <div class=\"tags\">\n        {values.map(reference => (\n                <Reference\n                    key={reference.href}\n                    href={reference.href}\n                    label={reference.label}\n                />\n            )\n        )}\n    </div>\n);\n","import { h } from \"hyperapp\";\n\nexport interface ITechLogoProps {\n    logo: string;\n}\n\nexport default ({logo}: ITechLogoProps) => (\n    <figure class=\"image is-96x96 }\">\n        <img src={logo}/>\n    </figure>\n);\n","import { h } from \"hyperapp\";\n\nimport Author from \"./Author\";\nimport Duration from \"./Duration\";\nimport References from \"./References\";\nimport { IReference, IResource } from \"./State\";\nimport TechLogo from \"./TechLogo\";\n\ninterface IResultProps {\n    resource: IResource;\n}\n\nexport default ({resource}: IResultProps) => {\n\n    const referenceValues = resource.references.map(\n        (reference: IReference) => (\n            {\n                key: reference.docname,\n                href: reference.href,\n                label: reference.label\n            }\n        ));\n\n    return (\n        <div class=\"kbb-fl-result box\">\n            <article class=\"media\">\n                <div class=\"media-left\">\n                    {(resource.primary_reference && resource.primary_reference.logo) && (\n                        <div class=\"media-right\">\n                            <TechLogo logo={resource.primary_reference.logo}/>\n                        </div>\n                    )}\n                </div>\n                <div class=\"media-content\">\n                    <div class=\"content\">\n                        <p>\n                            <a href={resource.href}>\n                                <strong>{resource.title}</strong>\n                            </a>\n                            <br/>\n                            <span>{resource.excerpt}</span>\n                        </p>\n                    </div>\n                    <nav class=\"level is-mobile\">\n                <div class=\"level-left\">\n                    {resource.author && (\n                        <Author\n                            href={resource.author.href}\n                            src={resource.author.thumbnailUrl}\n                            title={resource.author.title}\n                        />\n                    )\n                    }\n                    <span class=\"level-item\">\n                                <References values={referenceValues}/>\n                            </span>\n                </div>\n                <div class=\"level-right is-size-7 has-text-grey\">\n                    {resource.props.duration && (\n                        <Duration duration={resource.props.duration}/>\n                    )}\n                    <span class=\"level-item\">\n                                {resource.props.published}\n                            </span>\n                </div>\n            </nav>\n                </div>\n            </article>\n        </div>\n    );\n};\n","import { h } from \"hyperapp\";\n\nimport Result from \"./Result\";\nimport { IResource } from \"./State\";\n\ninterface IResultsProps {\n    values?: IResource[];\n}\n\nexport default ({values}: IResultsProps) => {\n    if (values) {\n        return (\n            <div>\n                {values && Object.values(values).map(resource => (\n                    <Result resource={resource}/>\n                ))}\n            </div>\n        );\n    }\n\n    return;\n};\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\n\ninterface ISearchboxProps {\n    actions: IActions\n}\n\nexport default ({actions}: ISearchboxProps) => (\n    <div class=\"field\">\n        <p class=\"control is-expanded has-icons-left\">\n            <input\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Filter listing...\"\n                autoFocus\n                onkeyup={\n                    ({target: v}: any) => {\n                        actions.setFilterTerm(v.value);\n                        actions.filterResults();\n                    }}\n            />\n            <span class=\"icon is-small is-left\">\n              <i class=\"fas fa-search\"/>\n            </span>\n        </p>\n    </div>\n)\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\nimport { IFilterChoice, IFilterChoices } from \"./State\";\n\ninterface ISidebarCheckboxProps {\n    choices: IFilterChoices;\n    actions: IActions;\n}\n\nexport default ({choices, actions}: ISidebarCheckboxProps) => (\n    <div>\n        {\n            Object.values(choices).map((choice: IFilterChoice) => (\n                <div class=\"control\">\n                    <label class=\"checkbox is-horizontal\">\n                        <input\n                            type=\"checkbox\"\n                            name={choice.value}\n                            checked={choice.checked}\n                            oninput={({target}: any) => {\n                                choice.checked = target.checked;\n                                actions.setFilterChoice();\n                                actions.filterResults();\n                            }}\n                        />\n                        <span class=\"kbb-label is-size-7\">{choice.label} ({choice.count})</span>\n                    </label>\n                </div>\n            ))\n        }\n    </div>\n);\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\nimport { IFilterChoice, IFilterChoices } from \"./State\";\n\ninterface ISidebarRadioProps {\n    choices: IFilterChoices;\n    actions: IActions;\n}\n\nexport default ({choices, actions}: ISidebarRadioProps) => (\n    <div>\n        {\n            Object.values(choices).map(\n                (choice: IFilterChoice) => (\n                    <div class=\"control\">\n                        <label class=\"radio is-horizontal\">\n                            <input\n                                type=\"radio\"\n                                value={choice.value}\n                                oninput={({target}: any) => {\n                                    choice.checked = target.checked;\n                                    actions.setFilterChoice();\n                                }}\n                            />\n                            <span class=\"kbb-label\">{choice.label}</span>\n                        </label>\n                    </div>\n                )\n            )\n        }\n    </div>\n);\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\nimport { IFilterChoices } from \"./State\";\n\ninterface ISidebarSelectProps {\n    choices: IFilterChoices;\n    actions: IActions;\n}\n\nexport default ({choices, actions}: ISidebarSelectProps) => (\n    <div>sc</div>\n);\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\nimport SidebarCheckbox from \"./SidebarCheckbox\";\nimport SidebarRadio from \"./SidebarRadio\";\nimport SidebarSelect from \"./SidebarSelect\";\nimport { IFilterGroup } from \"./State\";\n\ninterface ISidebarProps {\n    filterGroups: IFilterGroup[];\n    actions: IActions;\n}\n\nexport default ({filterGroups, actions}: ISidebarProps) => (\n    <div>\n        {filterGroups.map((fg: IFilterGroup) => {\n                if (Object.keys(fg.choices).length) {\n                    return (\n                        <div class=\"kbb-sidebargroup\">\n                            <p class=\"menu-label\">\n                                {fg.label} {fg.choices}\n                            </p>\n                            {(() => {\n                                switch (fg.control) {\n                                    case \"checkbox\":\n                                        return <SidebarCheckbox\n                                            choices={fg.choices}\n                                            actions={actions}\n                                        />;\n                                    case \"radio\":\n                                        return <SidebarRadio\n                                            choices={fg.choices}\n                                            actions={actions}\n                                        />;\n                                    case \"select\":\n                                        return <SidebarSelect\n                                            choices={fg.choices}\n                                            actions={actions}\n                                        />;\n                                    default:\n                                        return null;\n                                }\n                            })()}\n                        </div>\n                    );\n                }\n                return;\n            }\n        )}\n    </div>\n)\n","export function getDbUrl(el: HTMLElement) {\n    let dbUrl: string | null = \"\";\n    while (el.parentNode) {\n        el = el.parentNode as HTMLElement;\n        dbUrl = el.getAttribute(\"data-filteredlistingurl\");\n        if (dbUrl) {\n            return dbUrl;\n        } else if (el.tagName.toLowerCase() === \"body\") {\n            return;\n        }\n    }\n\n    return;\n}\n\nexport function getFilterParent(el: HTMLElement) {\n    let filterParent: string | null = \"\";\n    while (el.parentNode) {\n        el = el.parentNode as HTMLElement;\n        filterParent = el.getAttribute(\"data-filteredlisting-parent\");\n        if (filterParent) {\n            return filterParent;\n        } else if (el.tagName.toLowerCase() === \"body\") {\n            return;\n        }\n    }\n\n    return;\n}\n","import { h } from \"hyperapp\";\n\nimport { IActions } from \"./Actions\";\nimport Dumpstate from \"./Dumpstate\";\nimport Notification from \"./Notification\";\nimport Pagination from \"./Pagination\";\nimport Results from \"./Results\";\nimport Searchbox from \"./Searchbox\";\nimport Sidebar from \"./Sidebar\";\nimport { IState } from \"./State\";\nimport { getDbUrl, getFilterParent } from \"./utils\";\n\nconst onCreate = (element: HTMLElement, actions: IActions) => {\n    const dbUrl = getDbUrl(element);\n    if (dbUrl) {\n        actions.getJson(dbUrl);\n    }\n    const filterParent = getFilterParent(element);\n    if (filterParent && filterParent !== \"none\") {\n        actions.setFilterParent(filterParent);\n    }\n};\n\nexport default (state: IState, actions: IActions) => (\n    <div\n        class=\"kbb-fl container\"\n        oncreate={(element: HTMLElement) => onCreate(element, actions)}\n    >\n        <div class=\"columns is-centered\">\n            <div class=\"column is-half\">\n                <Notification notification={state.notification}/>\n                <Searchbox actions={actions}/>\n                {state.notification &&\n                <div class=\"notification is-warning\">\n                    {state.notification}\n                </div>\n                }\n            </div>\n        </div>\n        <div class=\"columns\">\n            <div class=\"column\">\n                <Sidebar filterGroups={state.filterGroups} actions={actions}/>\n            </div>\n            <div class=\"column is-four-fifths\">\n                <Results values={state.results}/>\n                <Pagination/>\n                <Dumpstate actions={actions}/>\n            </div>\n        </div>\n    </div>\n);\n","export interface IProps {\n    [ propname: string ]: any;\n}\n\nexport interface IAuthor {\n    docname: string;\n    href: string;\n    title: string;\n    label: string;\n    thumbnailUrl?: string;\n    headshotUrl?: string;\n    props: IProps;\n}\n\nexport interface IPrimaryReference {\n    docname: string;\n    label: string;\n    title: string;\n    logo?: string;\n}\n\nexport interface IReference {\n    reftype: string;\n    label: string;\n    docname: string;\n    href: string;\n    title: string;\n}\n\nexport interface IResource {\n    docname: string;\n    href: string;\n    title: string;\n    parent_docnames: string[];\n    rtype: string;\n    props: IProps;\n    excerpt: string;\n    published: string;\n    author?: IAuthor;\n    references: IReference[];\n    primary_reference?: IPrimaryReference;\n}\n\nexport interface IResources {\n    [ docname: string ]: IResource;\n}\n\nexport interface IFilterChoice {\n    label: string;\n    value: string;\n    count: number;\n    checked?: boolean;\n}\n\nexport interface IFilterChoices {\n    [ label: string ]: IFilterChoice;\n}\n\nexport interface IFilterGroup {\n    label: string;\n    value: string;\n    control: string;\n    choices: IFilterChoices;\n}\n\nexport interface IResultInfo {\n    sortKey: string;\n    batchSize: number;\n    start: number;\n}\n\nexport interface IState {\n    dbUrl?: string;\n    filterParent?: string;\n    isFetching: boolean;\n    notification: string;\n    resources: IResources;\n    filterGroups: IFilterGroup[];\n    filterTerm: string;\n    results: IResource[];\n    resultInfo: IResultInfo;\n}\n\nconst initialState: IState = {\n    isFetching: false,\n    notification: \"Initial State\",\n    filterGroups: [],\n    filterTerm: \"\",\n    resources: {},\n    results: [],\n    resultInfo: {\n        sortKey: \"published\",\n        batchSize: 10,\n        start: 0\n    }\n};\n\nexport default initialState;\n","import { app } from \"hyperapp\";\n\nimport \"./scss/kaybee_bulma.scss\";\nimport \"./scss/pygments.css\";\n\nimport Actions from \"./filteredlisting/Actions\";\nimport Container from \"./filteredlisting/Container\";\nimport initialState from \"./filteredlisting/State\";\n\napp(\n    initialState,\n    new Actions(),\n    Container,\n    document.getElementById(\"kbb-fl\")\n);\n"]}